
==== Front
Sensors (Basel)
Sensors (Basel)
sensors
Sensors (Basel, Switzerland)
1424-8220
MDPI

10.3390/s24113281
sensors-24-03281
Article
Time-Optimal Trajectory Planning and Tracking for Autonomous Vehicles
https://orcid.org/0000-0002-1594-1933
Li Jun-Ting Conceptualization Methodology Software Formal analysis Investigation Writing – original draft Writing – review & editing 1
https://orcid.org/0000-0001-9117-7116
Chen Chih-Keng Resources Supervision Funding acquisition 1*
https://orcid.org/0000-0002-4903-0935
Ren Hongbin Resources 2
de la Escalera Hueso Arturo Academic Editor
1 Department of Vehicle Engineering, National Taipei University of Technology, Taipei 10604, Taiwan; t112669009@ntut.org.tw
2 School of Mechanical Engineering, Beijing Institute of Technology, Beijing 100081, China; renhongbin2106@126.com
* Correspondence: ckchen@ntut.edu.tw
21 5 2024
6 2024
24 11 328110 4 2024
15 5 2024
20 5 2024
© 2024 by the authors.
2024
https://creativecommons.org/licenses/by/4.0/ Licensee MDPI, Basel, Switzerland. This article is an open access article distributed under the terms and conditions of the Creative Commons Attribution (CC BY) license (https://creativecommons.org/licenses/by/4.0/).
This article presents a hierarchical control framework for autonomous vehicle trajectory planning and tracking, addressing the challenge of accurately following high-speed, at-limit maneuvers. The proposed time-optimal trajectory planning and tracking (TOTPT) framework utilizes a hierarchical control structure, with an offline trajectory optimization (TRO) module and an online nonlinear model predictive control (NMPC) module. The TRO layer generates minimum-lap-time trajectories using a direct collocation method, which optimizes the vehicle’s path, velocity, and control inputs to achieve the fastest possible lap time, while respecting the vehicle dynamics and track constraints. The NMPC layer is responsible for precisely tracking the reference trajectories generated by the TRO in real time. The NMPC also incorporates a preview algorithm that utilizes the predicted future travel distance to estimate the optimal reference speed and curvature for the next time step, thereby improving the overall tracking performance. Simulation results on the Catalunya circuit demonstrated the framework’s capability to accurately follow the time-optimal raceline at an average speed of 116 km/h, with a maximum lateral error of 0.32 m. The NMPC module uses an acados solver with a real-time iteration (RTI) scheme, to achieve a millisecond-level computation time, making it possible to implement it in real time in autonomous vehicles.

autonomous racing
trajectory planning
trajectory tracking
NMPC
National Science and Technology CouncilMOST 111-2221-E-027-088 NTUT-BIT Joint Research ProgramNTUT-BIT-111-02 This research was funded by National Science and Technology Council grant number MOST 111-2221-E-027-088 and NTUT-BIT Joint Research Program grant number NTUT-BIT-111-02.
==== Body
pmc1. Introduction

Recent autonomous driving research has aimed to achieve Level 5 self-driving capabilities [1,2] for production vehicles, which requires path tracking controllers to precisely coordinate the throttle, brakes, and steering to control vehicles along predefined paths and velocity profiles. This task becomes particularly challenging when vehicle dynamics approach handling limits during high-speed maneuvers, such as lane changes or obstacle avoidance [3]. Consequently, these challenges have propelled autonomous racing to the forefront as a popular research topic [4], as it involves controlling high-performance vehicles under highly nonlinear dynamics with short response times. If vehicles can be reliably controlled within or even beyond their handling limits in such extreme racing or drifting scenarios [5], this could enhance their maneuverability when encountering emergency situations on normal roads, thereby improving overall driving safety. The core of autonomous racing lies in trajectory optimization, which involves planning the time-optimal racing line for a given parameterized racetrack. This process typically entails a comprehensive consideration of various vehicle performance factors and optimization objectives, including drivetrain configuration [6], tire–road friction coefficients [7], active rear-axle steering [8], gear ratios, aerodynamics, roll stiffness, suspension characteristics, and other variable parameters [9,10,11,12]. Trajectory optimization problems are typically discretized via the direct collocation method and solved using nonlinear programming (NLP) solvers. The key advantage of this approach is the capability to handle high-order nonlinear dynamic system models and complex constraints, while yielding fully converged optimal solutions.

Hierarchical control architectures have been developed to enable autonomous racing cars to accurately follow time-optimal reference trajectories planned in real time. By separating the control task into high and low levels with different prediction horizons and sampling times, the hierarchical approach increases the controller’s look-ahead capability, while maintaining a computationally manageable size for NLP problems [13]. The hierarchical control scheme in [14] consisted of a long prediction horizon NMPC with a point-mass model and a short horizon NMPC with a high-fidelity vehicle model. This structure allowed for real-time feasibility, without excessively simplifying the vehicle model. Furthermore, Srinivasan et al. [15] implemented a hierarchical control structure in a race car, comprising a 200 Hz low-level controller and a 40 Hz high-level NMPC with an optimized torque vectoring strategy. This strategy minimized the model mismatch between planning and control and verified the ability to outperform professional human drivers in racing scenarios.

This research presents TOTPT, a unified hierarchical optimization framework for controlling autonomous vehicles at their handling limits. It utilizes a TRO layer that plans the time-optimal raceline and velocity offline, and an NMPC layer that tracks the references online. The open-source code for the TOTPT framework is available at the online repository (https://github.com/zlijunting/TOTPT, accessed on 10 May 2024).

This study primarily focused on the development of the following aspects:A unified vehicle modeling and control framework: The framework employs a consistent four-wheel double-track vehicle model across both the offline TRO and online NMPC layers. This unified modeling approach ensures coherent predictive behavior and enables efficient integration between the planning and control modules. Furthermore, proper scaling of variables and constraints, combined with well-defined problem formulations, facilitates rapid convergence of the optimization solvers in both layers.

Tailored tire modeling: Both the TRO and NMPC layers incorporate tire ellipse constraints on all four wheels, to enhance driving stability. The TRO layer utilizes hard tire ellipse constraints to fully utilize tire grip. In contrast, the NMPC layer imposes soft tire ellipse constraints using a pure slip tire model, which is more suitable for the multiple shooting scheme and convergence requirements of NMPC.

An adaptive reference preview algorithm: The reference trajectory adapts to the vehicle’s speed. Specifically, it utilizes the travel distance and speed predicted from the NMPC to estimate the optimal path station and corresponding reference speed and curvature for the next time step. This approach improves the trajectory tracking performance by fully leveraging the model’s predictive capabilities.

This paper is organized as follows: Section 2 describes the kinematic modeling of the vehicle relative to the reference path and the dynamics modeling for path tracking. Section 3 details the 3-DOF double-track vehicle dynamics model, covering the load transfer, wheel torques, nonlinear tire models, and vehicle constraints. Section 4 provides an overview of the hierarchical control scheme, with the offline TRO module generating optimal trajectories and the online modules handling error evaluation, path preview, and NMPC trajectory tracking. Section 5 formulates the TRO problem for offline trajectory planning, using the direct collocation method to discretize the problem into an NLP. Section 6 presents the formulation of the NMPC problem for online trajectory tracking, including the prediction model, discretization method, cost function, and constraints. Additionally, a reference preview algorithm is proposed. Section 7 presents the time-optimal trajectory planned using TRO, along with the trajectory tracking results obtained using NMPC. The path tracking performance, tire workloads, and execution efficiency are also analyzed.

2. Track Modeling

A scheme diagram of the path tracking model is illustrated in Figure 1, where R is the distance from the vehicle CG to the instantaneous center of rotation (ICR), κ=dϕref(ds)−1 is the path curvature at a given path station s, ϕref is the reference course angle, and Nl∈R+ and Nr∈R+ are the normal distances from the path to the left and right track boundaries. The vehicle moves in the direction defined by the vehicle’s course angle ϕ, with a velocity of V. The relative states between the vehicle and the path include the normal distance from the vehicle’s CG to the nearest point on the path n, the relative heading ξ=ψ−ϕref, and relative course χ=ϕ−ϕref=ξ+β.

The lateral deviation and relative heading are selected as the primary path tracking states, then the path tracking dynamics are described by the following equations: (1) n˙=Vsin(χ),

(2) ξ˙=γ−dϕrefdsdsdt

(3) =γ−κs˙,

where s˙ is the vehicle velocity projected onto the direction of the reference course at path (4) s˙=Vcos(χ)1−κn.

The ‘distance traveled’ is used as the independent variable for the TRO [9]. Subsequently, the dependent variable, i.e., time traveled for a given path grid, can be obtained using the factor Sf, as defined by (5) dtds=1−κnVcos(χ)≕Sf.

Track Constraint

The lateral deviation of the vehicle is limited, to ensure that it remains within the track boundaries, (6) −Nr+wt2+ws≤n≤Nl−wt2+ws,

where wt is the vehicle track width, and ws=0.2m is the preserved safety distance.

3. Vehicle Modeling

The choice of vehicle models for the path-following problem is diverse [16]. Considering vehicle control near handling limits during racing maneuvers, the selected model must capture the coupling of longitudinal and lateral motions, as well as the nonlinear behavior of tire forces. In this research, a 3-degree-of-freedom (DOF) double-track vehicle model is employed to address both the TRO and NMPC problems. Aerodynamic drag and lift forces are included, while suspension dynamics are ignored. A rear-wheel drive (RWD) sports car with dual-motor is utilized as the test vehicle in this study, and the vehicle parameters are specified in Table A1.

3.1. Double-Track Vehicle Model

Figure 2 shows the layout of the double-track vehicle model, with the vehicle heading at yaw angle ψ from the x-axis of the predefined global coordinates OG. The accelerations ax and ay are located at the vehicle body coordinate OB, and at and an are located at the vehicle course coordinate OC. These accelerations are expressed by the following equations: (7) ax=1mvFxfcos(δ)−Fyfsin(δ)+Fxr−Fdrag,

(8) ay=1mvFyfcosδ+Fxfsinδ+Fyr,

(9) at=1mvFxfcos(δ−β)−Fyfsin(δ−β)+Fxrcos(β)+Fyrsin(β)−Fdragcos(β),

(10) an=1mvFxfsin(δ−β)+Fyfcos(δ−β)−Fxrsin(β)+Fyrcos(β)+Fdragsin(β),

where mv is the vehicle mass, δ is the front wheel steering angle, Fxf/l is the total longitudinal tire force at the front/rear axle, Fyf/l is the total lateral tire force at the front/rear axle, and Fdrag=12ρCdAVx2 is the aerodynamic drag force, where ρ is the air density, Cd is the drag coefficient, A is the vehicle frontal area, and Vx is the longitudinal vehicle speed.

The yaw moment about the center of gravity (CG) of the vehicle is (11) Mz=lfFyfcos(δ)+lfFxfsin(δ)−lrFyr+wt2(Fyfl−Fyfr)sin(δ)+(Fxfr−Fxfl)cos(δ)+(Fxrr−Fxrl),

where lf and lr are the distances from CG to the front and rear axles.

Similarly to the vehicle models in [6,7,17,18], the total velocity V, sideslip angle β, and yaw rate γ are selected as the state variables; then, the following equations are used to describe the planar dynamics of the vehicle: (12) V˙=at,

(13) β˙=ϕ˙−ψ˙=anV−γ,

(14) γ˙=MzIz,

where Iz is the moment of inertia.

3.2. Load Transfer

A load transfer model is introduced to evaluate the tire forces when a vehicle undergoes significant changes in both longitudinal and lateral accelerations. Referring to [19], the equations for the static load transfer are (15) Fzfl=12mv(lrlg−hcla¯x)−mv(lrlg−hcla¯x)hcwta¯yg−Flift4,

(16) Fzfr=12mv(lrlg−hcla¯x)+mv(lrlg−hcla¯x)hcwta¯yg−Flift4,

(17) Fzrl=12mv(lflg+hcla¯x)−mv(lflg+hcla¯x)hcwta¯yg−Flift4,

(18) Fzrr=12mv(lflg+hcla¯x)+mv(lflg+hcla¯x)hcwta¯yg−Flift4,

where l is the wheelbase, hc is the height of CG, g is the gravity constant, a¯x and a¯y are the decision variables provided by the NLP solver, while the aerodynamic lift force, characterized by the lift coefficient Cl, is given by Flift=12ρClAVx2.

To prevent algebraic loop issues being encountered by the optimization solver during function evaluations, the algebraic variables a¯x and a¯y are introduced, and constraints are imposed to ensure their values are consistent with the vehicle accelerations (7) and (8), (19) a¯x−ax=0,

(20) a¯y−ay=0.

To improve the convergence of online NMPC solvers, the equality constraints on accelerations are approximated using first-order dynamics as the following equations: (21) a¯˙x=1τaccax−a¯x

(22) a¯˙y=1τaccay−a¯y

where the time constant τacc is set to half the NMPC sampling time.

3.3. Wheel Torques

The torque distribution between the front and rear axles are determined by the following equations:(23) Tf=ktTt+kbTb,

(24) Tr=(1−kt)Tt+(1−kb)Tb,

where Tt and Tb are the total traction torque and brake torque commands. kb denotes the distribution ratio of brake torque between the front and rear axles, while kt indicates the split coefficient for traction, which is determined by the drivetrain type of the vehicle. For the RWD vehicle considered in this study, kt=0 and kb=0.6.

The axle torques Tf and Tr are then redistributed to the left and right wheels in proportion to the relative vertical tire forces, similarly to the strategy in [20]. Then, the torque commands for the four wheel are determined by the following equations:(25) Tfl=Tf21−ΔFzfFzf,Tfr=Tf21+ΔFzfFzf,

(26) Trl=Tr21−ΔFzrFzr,Trr=Tr21+ΔFzrFzr,

where the relative vertical loads are calculated as (27) ΔFzf=12(Fzfr−Fzfl)=mv(lrlg−hcla¯x)hcwta¯yg,

(28) ΔFzr=12(Fzrr−Fzrl)=mv(lflg+hcla¯x)hcwta¯yg.

3.4. Tire Modeling

According to the moment and force balance equations, the dynamics of wheel angular velocity are described by the following equation:(29) ω˙i=1IwTi−rwFxi,i∈fl,fr,rl,rr,

where Ti is the torque applied on the wheel, Iw is the spin moment of inertia of the wheel, and rw is the effective rolling radius.

The longitudinal velocities of the tire trajectories are given by (30) Vxfl=(Vx−wt2γ)cos(δ)+(Vy+lfγ)sin(δ),

(31) Vxfr=(Vx+wt2γ)cos(δ)+(Vy+lfγ)sin(δ),

(32) Vxrl=Vx−wr2γ,

(33) Vxrr=Vx+wr2γ,

and the lateral velocities of the tire trajectories are given by (34) Vyfl=(Vy+lfγ)cos(δ)−(Vx−wt2γ)sin(δ),

(35) Vyfr=(Vy+lfγ)cos(δ)−(Vx+wt2γ)sin(δ),

(36) Vyrl=Vy−lrγ,

(37) Vyrr=Vy−lrγ.

Then, the longitudinal slip λ and sideslip angle α of the tire at each corner i∈fl,fr,rl,rr are defined by (38) λi=rwωi−VxiVxi,

(39) αi=tan−1VyiVxi.

3.4.1. Simplified MF Tire Model

The simplified magic formula (simplified MF) [21] (ch. 9.2.2, [22]) tire model is used to capture the nonlinear characteristics of tire forces. This model is easy to implement and has good continuity, providing advantages for optimization algorithms that require model gradients. The simplified MF for the longitudinal tire forces under pure longitudinal slip conditions is shown in the left plot of Figure 3. It is the function of the longitudinal tire slip λ, vertical tire force Fz, and road friction coefficient μ, as shown in the following equation:(40) Fx0λ,Fz,μ=μμ0DxsinCxtan−1Bxλ,

where μ0 is the road friction coefficient during tire testing, and Bx, Cx, and Dx are fitting coefficients. Since the peak factor Dx varies linearly with the vertical tire force, it can be modeled as a first-order function of Fz with a linear term d1 and a constant term d2, (41) Dx=d1xFz+d2x.

The simplified MF for the lateral tire forces under pure sideslip conditions is shown in the right plot of Figure 3, and it is expressed by the following equation:(42) Fy0α,Fz,μ=−μμ0DysinCytan−1Byα,

where (43) Dy=d1yFz+d2y.

3.4.2. Combined Slip Tire Model for TRO

In highly dynamic scenarios, a combination of braking and cornering maneuvers is commonly encountered, leading to coupled lateral and longitudinal tire slips and forces. Consequently, the coupled slip effect is incorporated into the TRO, to provide an accurate reference trajectory. The combined slip model from (ch. 4.2.2, [22]) is employed to evaluate the tire forces under combined slip conditions, where the theoretical slip quantities at four corners are defined as (44) σi=λi2+tan(αi)2,i∈fl,fr,rl,rr.

And the combined slip longitudinal and lateral tire forces of are defined by (45) Fxi=λiσiFx0σi,Fzi,μ,Fyi=tan(αi)σiFy0σi,Fzi,μ,i∈fl,fr,rl,rr.

3.4.3. Pure Sideslip Tire Model for NMPC

Considering the convergence and real-time requirements of the online trajectory tracking task, wheel dynamics are not considered in the NMPC formulation. Instead, the combined tire force is characterized by tire ellipse constraints. Consequently, the longitudinal and lateral tire forces are described by the following equations:(46) Fxi=Tirw,Fyi=Fy0αi,Fzi,μ,i∈fl,fr,rl,rr.

3.5. Vehicle Constraints

Quadratic nonlinear constraints are imposed to ensure that the combined tire forces remain within the tire friction ellipses, thereby preventing a loss of traction. (47) Fxiμx,maxFzi2+Fyiμy,maxFzi2≤1,i∈fl,fr,rl,rr,

where μx,max and μy,max are the maximum longitudinal and lateral tire friction coefficients.

To achieve the optimal actuation efficiency, it is not desirable to apply both motor and brake torque to the wheel at the same time. Thus, an equality constraint is imposed to ensure that the total traction and braking commands are orthogonal:(48) TtTb=0.

Considering rear dual electric motors, two equality equations are introduced to limit the motor powers separately, (49) Trlωrl≤Prl,max,Trrωrr≤Prr,max,

where P·,max is the maximum motor power for the respective motor, ω is the wheel angular velocity, and subscripts rl and rr denote the rear-left and rear-right wheels, respectively.

4. Control Architecture

The overall control architecture is shown in Figure 4, with modules for offline and online execution. The offline TRO module generates the time-optimal trajectory based on the racetrack data. The optimal curvature, velocity, and raceline trajectories are then provided to the online modules. During the online path tracking stage, the tracking error evaluation module calculates the lateral deviation and heading error using the algorithm proposed in [23]. The preview module queries the reference curvature and speed trajectories based on the preview path station. The NMPC module solves the optimal vehicle inputs for the online trajectory tracking. Subsequently, the low-level controller distributes the desired torque commands as rear driving torques and four-wheel braking torques.

5. Trajectory Optimization

Trajectory optimization aims to determine the reference path with the shortest travel time for a given racetrack, along with the corresponding vehicle states and input trajectories, while satisfying specified constraints. Prior to optimization, the centerline of the racetrack needs to be smoothed and discretized into uniform grid distances. Subsequently, the direct orthogonal collocation method is employed to discretize the system dynamics and cost functions in the spatial domain, thereby transforming the optimal control problem (OCP) into a standard NLP formulation.

5.1. System Dynamics in the Spatial Domain

The TRO problem is formulated in the spatial domain, using the distance along the track as the independent variable instead of time. This allows the dynamics to be expressed as a function of the path position, rather than time. The state variables of the TRO are concatenated from the vehicle states, wheel velocities, and path tracking states, (50) x=Vβγωflωfrωrlωrrnξ⊤.

The control variables are the total traction/braking torque commands and front wheel steering angle, (51) u=TtTbδ⊤.

The auxiliary variables are the algebraic longitudinal and lateral accelerations, (52) z=a¯xa¯y⊤.

Then, the system dynamics are the function of state, control, auxiliary and parameter variables, as shown in the following equations: (53) x˙=V˙β˙γ˙ω˙flω˙frω˙rlω˙rrn˙ξ˙⊤=(12)(13)(14)(29)(29)(29)(29)(1)(3)⊤.

The system dynamics in the spatial domain x′ are transformed from the time domain using the variable Sf, (54) x′=dxds=dtdsdxdt≕Sfx˙fsx,u,z,κ.

The magnitudes of states, controls, and auxiliary variables are bounded due to the physical limits of the vehicle and actuators, (55) xmin≤x≤xmax,

(56) umin≤u≤umax,

(57) zmin≤z≤zmax,

where the subscripts min and max denote the lower and upper bounds of the variables.

The rates of the control variables are limited according to the dynamic characteristics of the actuators, (58) u˙min≤u˙≤u˙max.

5.2. Direct Collocation

As Figure 5 shows, the distance along the track centerline [s0,sf] is divided into N intervals by the step length dsk, with each interval spanning [sk,sk+1], where k ranges from 0 to N−1.

The state trajectory of the interval is approximated using the Legendre polynomial as the following equation:(59) xkτ=∑i=0qPiτxk,i,i=0,…,q.

where Pi(τ) is the basis of the Legendre polynomial over the unit interval τ=[1,0], computed using Gauss–Legendre collocation points {τ0,τ1,…,τq} (ch. 10.3, [24]) with order q, as defined by (60) Piτ=∏j=0,j≠iqτ−τjτi−τj,i=0,…,q.

To facilitate the representation of state trajectories within each interval for subsequent formulations, the state variables at the knot and collocation points are aggregated into a matrix denoted as Xk, (61) Xk=xk,0xk,1⋯xk,q∈Rnx×q+1,k=0,…,N−1.

The direct collocation method is utilized to discretize the TRO problem, following the approaches outlined in [11,25,26]. This transcription method involves imposing additional constraints to enforce the polynomials approximate to the system dynamics.

For each interval, the derivatives of Legendre polynomials at the collocation points must match the system dynamics, as in the following collocation equation:(62) XkC−dskxk,1′⋯xk,q′=0,k=0,…,N−1,

where xk,j′=fs(xk,j,uk,zk,κk) are the system dynamics in the spatial domain at the collocation points, and the control uk is piece-wise constant for [sk,sk+1).

The state trajectory at the end of the interval must be consistent with the beginning of the next interval, as seen in the following continuity equation:(63) XkD−xk+1=0,k=0,…,N−1.

The matrix C is defined using the derivatives of the Legendre polynomials evaluated at collocation points, and the matrix D is defined using the Legendre polynomials evaluated at the end points of the interval, (64) C=P˙0τ1⋯P˙0τq⋮⋱⋮P˙qτ1⋯P˙qτq∈Rq+1×q,D=P01⋮Pq1∈Rq+1.

Additional constraints set h include the tire ellipse, actuator orthogonality, motor power, and state/control limits, which are imposed at the knot points only, (65) hmin≤h(xk,uk,zk,κk)≤hmax,k=0,…,N,

where hmin and hmax are the lower and upper bounds of constraint.

The variation in control is mapped onto the time domain in a manner that aligns with the specified bounds within the time domain. (66) u˙≈dudsdsdt=u′s˙→u˙min≤u′s˙≤u˙max.

5.3. Cost Function

The cost function is an integral part of trajectory optimization, representing the objective to be minimized. To minimize the lap time, the time cost within each discretized path interval must be incorporated, as in the following equation:(67) dtk=dskSfxk,1,κk⋯Sfxk,q,κkB,k=0,…,N−1,

where the matrix B aggregates the contributions of the time cost at the collocation points of intervals, (68) B=∫01P1τdτ⋯∫01Pqτdτ⊤∈Rq.

To obtain the shortest laptime with smooth vehicle inputs, the cost function sums the time cost and the quadratic cost of variations in control and auxiliary variables over all intervals, (69) JTRO=∑k=0N−1dtk+uk′⊤Ruk′+zk′⊤Wzk′,

where R and W are the weighting matrices, and if it is observed that the resulting optimal input commands exhibit oscillatory behavior, then the corresponding weights in the matrices need to be incremented. The variations in variables uk′ and zk′ are calculated using the following difference equations:(70) uk′=uk+1−ukdsk,zk′=zk+1−zkdsk,k=0,…,N−1.

5.4. NLP Solver

To improve the convergence of the NLP, it is necessary to properly scale the decision variables of the solver [27]. The state and control variables are scaled by the scaling factors, which are determined by their maximum expected values. This normalization process ensures that all the variables lie within a common range, typically between −1 and 1. The detailed workflow and implementation of the scaling procedure can be found in [28].

The overall TRO problem is summarized in Table 1 and includes decision variables, constraints, lower and upper bounds, and scaling factors. The symbolic framework CasADi [29] is used to formulate the TRO problem and transform it into a NLP. The large-scale nonlinear optimization solver Ipopt [30] is used to solve the NLP.

6. Nonlinear Model Predictive Control

The NMPC serves as the online trajectory tracking controller of the hierarchical control architecture. Its primary objective is to solve the optimal driving inputs, to control the vehicle in following the time-optimal reference trajectories generated by the TRO layer in real time.

6.1. Prediction Model

The NMPC needs to predict the future vehicle states, inputs, path station, and tracking errors; thus, the state variables of prediction model are selected as (71) x=Vβγa¯xa¯ysnξTtTbδ⊤.

The control variables are the rates of driving inputs:(72) u=T˙t,cmdT˙b,cmdδ˙cmd.

The system dynamics of the prediction model are formulated as: (73) x˙=V˙β˙γ˙a¯˙xa¯˙ys˙n˙ξ˙T˙tT˙bδ˙⊤=(12)(13)(14)(21)(22)(4)(1)(3)T˙t,cmdT˙t,cmdT˙t,cmd⊤≕fpx,u,κ.

The first to fifth equations in (73) predict the vehicle states and tire vertical loads, the sixth to eighth equations predict the path tracking errors and driving distance. In the last three equations, we assign the rate of system inputs as the extended states, similarly to [5,15,31]. Using the variation in driving inputs as the control variable allows us to conveniently penalize it when formulating optimization problems at a higher interface level, thereby aligning with the cost function of TRO (69).

The magnitudes of states, controls, and rates of the control variables are bounded, due to the physical limits of the vehicle and actuators, (74) xmin≤x≤xmax,

(75) umin≤u≤umax,

(76) u˙min≤u˙≤u˙max.

6.2. Discretization

The implicit Runge–Kutta method (IRK) of second order is used to discretize the prediction model over the horizon k=0,…,Np−1, (77) x0=x^(t),

(78) xk+1=xk+ts2fpxk,uk,κk+fpxk+1,uk+1,κk+1,

where x^(t) is the measured or estimated stated at the current time, and ts=0.05s is the sample time of NMPC or the time interval for solving each optimization problem. The prediction horizon is set as Np=30, resulting in the prediction time tp=Npts=1.5s.

6.3. Preview Path Station

In this section, an algorithm is proposed for generating the optimal reference trajectory for NMPC based on the preview path station. The preview path stations are obtained by moving the previous optimal path station by one step and adding a correction term to predict the distance to move for an additional step. Specifically, the preview path station s^k at each stage k is set equal to the previous optimal path station:(79) s^k=sk+1∗,k=0,…,Np−1,

This ensures that the NMPC tracks the most recent optimal path station.

For the final preview path station s^Np, a correction term is added to extrapolate the distance the vehicle is expected to travel in the final prediction step:(80) s^Np=sk+1∗+tsVNp∗,

where VNp∗ is the optimal velocity at the end of the prediction horizon, obtained from the previous NMPC solution. By interpolating the reference trajectory planned by TRO using the preview path stations that adapted to the vehicle’s current velocity, accurate preview references can be obtained for the NMPC to track.

6.4. Reference Output

The output of NMPC is y=V,β,n,χ⊤, and the reference output at each stage is given by (81) yk,ref=Vref(s^k)tan−1(δlrl)00⊤,

meaning that the vehicle is expected to follow the reference velocity with zero path tracking errors, and the vehicle slip angle follows the kinematic reference value to maintain lateral stability.

6.5. Cost Function

Model–plant mismatches or external disturbances can lead to constraint violations that render the original optimization problem infeasible. To address this issue, a slack variable sh is introduced to handle constraint violations, while still maintaining a feasible solution, (82) hmin−sh≤h≤hmax+sh.

where h includes the actuator orthogonality, four tire ellipse constraints, and power limits.

To balance the objectives of accurately tracking the desired trajectory, minimizing control efforts, and permitting constraint relaxation, the cost function to be minimized over the prediction horizon Np is formulated by combining tracking errors, control efforts, and penalties on the slack variables: (83) JNMPC=∑k=1Np12Sy−1yk−yk,refQ2+∑k=0Np−112Su−1ukR2+12sh⊤Zsh,

where Sy and Su are the scaling matrices, utilizing the maximum allowable deviation from the nominal value as the scaling factors. The weighting matrices Q, R, and Z penalize tracking errors, control efforts, and the slack variable, respectively. The elements within the Q matrix are adjusted to prioritize varying objectives, such as improving velocity tracking or decreasing lateral deviation. Similarly, the R matrix must be fine-tuned to prevent oscillatory behavior in the driving inputs.

The overall NMPC path tracking problem is formulated in Table 2. The fast and embedded solvers acados [32] was utilized as the NMPC solver, which features the implicit Runge–Kutta (IRK) for numerical simulation and the multiple shooting approach to discretize the OCP. Real-time iteration was also implemented, to perform one sequential quadratic programming (SQP) iteration at each sampling step, to further reduce the NMPC computation time. The OCP formulation, integrators, transcription methods, weights, parameters, and QP solvers were stated at the high-level interface of Matlab. In addition, code generation was used to automatically generate a fast NMPC C code that was deployed in Simulink via the S-function. The solver parameters are specified in Table A2.

7. Numerical Results

7.1. Simulation Setup

The simulations were performed on a desktop computer with an Intel® i5-12500 processor. The online modules of Figure 4 were implemented and run in Simulink. The simulation was demonstrated on a lap of the Catalunya Circuit, with the raw data of track being extracted from the racetrack-database (https://github.com/TUMFTM/racetrack-database, accessed on 5 October 2024) and the time-optimal trajectories generated by the proposed TRO algorithm. The total length of the raceline sf=4584m was divided into uniform discrete intervals of ds=3m for TRO planning and ds=1m for NMPC tracking. To examine the convergence of NMPC at low speeds, where the numerical sensitivity to small longitudinal velocity and its associated gradients can be issues, the initial speed of the vehicle model in TRO, NMPC, and Simulink were set to 1m s−1.

7.2. Path Tracking Results

Figure 6 presents the path tracking response in global coordinates. The raceline displays the position of the vehicle’s CG with the velocity contour. It can be observed that the vehicle decelerated appropriately before reaching the apex, accelerated during the exit phase, and maintained high speeds on the straight sections of the track. The average velocity of the vehicle was 116.5km h−1. The lap time achieved by the NMPC was 141.45s, which was 1.37s more than the optimal lap time solved by the TRO, representing a relative error of 0.98%.

Figure 7 presents the path tracking errors in Cartesian coordinates. The NMPC considered the future vehicle states, path tracking states, and preview references to coordinate the vehicle lateral and longitudinal motions, allowing the vehicle to follow the reference path with minimal tracking errors. Under the imposed racetrack constraints, the vehicle remained within the track boundaries during the race, as is evident from the blue line representing the lateral deviation not reaching the black line boundaries. The RMS and maximum values of the absolute lateral deviation were 0.11m and 0.32m, respectively. The RMS and maximum values of the absolute course error were 0.33deg and 1.28deg, respectively.

7.3. Vehicle States

Figure 8 demonstrates the performance of the NMPC controller in accurately tracking the highly dynamic trajectories planned by the TRO layer. The NMPC controlled the vehicle to approach the at-limit speed profile, while utilizing the yaw rate to follow an aggressive path curvature, and keeping the sideslip angle within a stable range.

7.4. Driving Inputs

Figure 9 shows the optimal vehicle accelerations, driving inputs, and wheel torque commands. The first plot shows that the vehicle acceleration solved by the NMPC controller was consistent with the planned acceleration from the TRO, exhibiting a similar trend in the torque commands. The steering and total torque commands were smooth, without any oscillation, which made them easier for the actuators to implement, and the total traction and braking commands satisfied the orthogonal constraint, enabling the actuators to operate with optimal efficiency. The traction and braking torques were appropriately distributed to four wheels based on the vertical load of each wheel.

7.5. Tire Workloads

Figure 10 shows the tire grip margin using the tire workload plots, where the tire workloads in longitudinal and lateral directions are defined by (84) μ^xi=FxiFzi,μ^yi=FyiFzi,i∈fl,fr,rl,rr.

Under the tire ellipse constraint, the majority of the tire friction data points for all four wheels lay within the friction circle. The data points exceeding the boundary constituted 16% and 13% of the total data points for the left-rear wheel and right-rear wheel, respectively. The maximum values of the tire workloads did not exceed μ=1.1, which falls within an acceptable tolerance range.

8. Execution Performance

Figure 11 records information about the acados solver. We configured the solver with both the SQP and SQP-RTI schemes and performed racing simulations, while keeping the other parameters unchanged. Both schemes achieved the same lap time and consistent cost function residuals. However, there was a significant difference in the computation time: the average computation time per sampling instance was 0.01 s for SQP and 0.005 s for RTI. It is noteworthy that the number of iterations using the SQP scheme alone did not exceed five, indicating that the problem exhibited good convergence and was well-defined. This provided a suitable environment for the RTI scheme, which performed only one iteration per sampling time. Furthermore, the cost function residuals being close to unity suggests that all the decision variables of the solver were appropriately scaled.

9. Conclusions

The proposed TOTPT framework utilizes a two-layered approach, with an offline TRO module and an online NMPC module. The TRO layer generates minimum-lap-time trajectories using a direct collocation method, which optimizes the vehicle’s path, velocity, and control inputs to achieve the fastest possible lap time, while respecting vehicle dynamics and track constraints. This computationally expensive offline optimization leverages a consistent double-track vehicle model to ensure coherence between the planning and tracking stages. The NMPC layer, operating in real time, is responsible for precisely tracking the reference trajectories generated by the TRO. By incorporating predicted path stations and adapting the reference trajectory based on the vehicle’s current speed and projected travel distance, the NMPC controller is able to maintain accurate path following, even under highly dynamic conditions. Notably, the NMPC formulation achieved millisecond-level execution times through the use of the RTI scheme. The authors validated the TOTPT framework through simulation on the Catalunya circuit, where the vehicle was able to track the optimal racing line with high speed and low tracking errors. The results highlight the framework’s ability to push the vehicle to its limits, which could translate to enhanced maneuverability and safety for autonomous vehicles in emergency scenarios on public roads.

Future Work

Although the proposed control scheme demonstrated precise tracking results in the simulation, certain aspects require further improvement for practical application in future work. Firstly, while the simulation results demonstrated the framework’s performance in controlling a planar vehicle model on a two-dimensional track, it would be valuable to evaluate its robustness and adaptability on tracks with different features (e.g., track curvature, elevation changes, surface conditions). Secondly, considering real-time path planning, we could either look for solvers capable of solving NLP in real-time or simplify the TRO problem by employing a point-mass vehicle model with g-g-v diagram constraints. Finally, conducting experiments in real environments is crucial. A viable approach would be to implement the algorithm in the low-cost autonomous vehicle system of the F1TENTH platform [33], conducting path-following experiments to evaluate the real-time performance and robustness of the control algorithms under practical conditions.

Author Contributions

Conceptualization, J.-T.L. and C.-K.C.; methodology, J.-T.L.; software, J.-T.L.; formal analysis, J.-T.L.; investigation, J.-T.L.; resources, C.-K.C. and H.R.; writing—original draft preparation, J.-T.L.; writing—review and editing, J.-T.L.; supervision, C.-K.C.; funding acquisition, C.-K.C. All authors have read and agreed to the published version of the manuscript.

Institutional Review Board Statement

Not applicable.

Informed Consent Statement

Not applicable.

Data Availability Statement

Data are contained within the article.

Conflicts of Interest

The authors declare no conflicts of interest.

Appendix A

sensors-24-03281-t0A1_Table A1 Table A1 Parameters of the vehicle model used in the study.

	Description	Symbol	Value	Unit	
Env.	gravity constant	g	9.81	[m s−2]	
coefficient of road friction	μ0	1.0	–	
air density	ρ	1.2	[kg m−3]	
coefficient of drag	Cd	0.3	–	
coefficient of lift	Cl	−0.6	–	
Vehicle	front cross sectional area	A	1.5	[m2]	
vehicle mass	mv	1250	[kg]	
vehicle moment of inertia	Iz	1050	[kg m2]	
distance from CG to front axle	lf	1.4	[m]	
distance from CG to rear axle	lr	1.4	[m]	
height of CG	hc	0.35	[m]	
track width	wt	1.5	[m]	
wheel spin moment of inertia	Iw	1.2	[kg m2]	
wheel effective rolling radius	rw	0.3	[m]	
Tire	long. stiffness factor	Bx	18	–	
long. shape factor	Cx	1.3	–	
long. peak factor linear term	d1x	0.95	–	
long. peak factor constant term	d2x	320	–	
lateral stiffness factor	By	13	–	
lateral shape factor	Cy	1.4	–	
lateral peak factor linear term	d1y	0.95	–	
lateral peak factor constant term	d2y	320	–	
maximum longitudinal friction coeff.	μx,max	1.0	–	
maximum lateral friction coeff.	μy,max	1.0	–	

sensors-24-03281-t0A2_Table A2 Table A2 Parameters of the acados solver used in the NMPC implementation.

Option	Value	
sim_method	irk	
sim_method_num_stages	2	
sim_method_num_steps	1	
nlp_solver_max_iter	30	
nlp_solver_tol_stat	10−4	
nlp_solver_tol_eq	10−4	
nlp_solver_tol_ineq	10−4	
nlp_solver_tol_comp	10−4	
qp_solver	full_condensing_hpipm	
nlp_solver_exact_hessian	true	
Parameter		
Sy	diag1,0.05,0.1,0.05	
Su	diag2×103,4×103,π8	
Q	diag1,1,1,1	
R	diag1,1,10	
Z	diag10,10,10,10,10	

Figure 1 Kinematic relationship between the vehicle and the reference path.

Figure 2 Diagram of the double-track vehicle model.

Figure 3 Simplified MF tire model.

Figure 4 Control architecture for the path following problem.

Figure 5 Illustration of the decision variables for the direct collocation with q=3 in a path interval.

Figure 6 Path tracking response in global coordinates.

Figure 7 Path tracking errors in Cartesian coordinates.

Figure 8 Trajectory tracking results with vehicle states. The black dotted lines are the optimal trajectories computed by the TRO. The blue lines are the tracking results achieved by the NMPC.

Figure 9 Optimal driving inputs and wheel torque commands. The black dotted lines are the optimal trajectories computed by the TRO.

Figure 10 Tire workloads.

Figure 11 SQP iteration, execution time, and residual of cost function of NMPC solver.

sensors-24-03281-t001_Table 1 Table 1 TRO formulation.

	Description	Symbol/
Equation	Scale	Lower	Upper	Units	
Minimize	Cost	JTRO (69)					
By varying							
States	Velocity	V	100	0	250/3.6	m s−1	
	Sideslip angle	β	1	−π/4	π/4	rad	
	Yaw rate	γ	1	−π/2	π/2	rad s−1	
	Wheel velocities	ωi	100/rw	0	250/3.6/rw	rad s−1	
	Lateral displacement	n	5	−Nr+wt/2+ws	Nl−wt/2+ws	m	
	Relative heading	ξ	1	−π/4	π/4	rad	
Controls	Traction torque	Tt	2×103	0	4×103	N m	
	Braking torque	Tb	4×103	−8×103	0	N m	
	Wheel steering angle	δ	π/8	−π/8	π/8	rad	
Aux. variables	Longitudinal acceleration	a¯x	g	−3g	3g	m s−2	
	Lateral acceleration	a¯y	g	−3g	3g	m s−2	
Parameter	Path curvature	κ	–	–	–	m−1	
Subject to							
Constraints	Dynamics as collocation	(62), (63)	–	–	–	–	
	Equality of accelerations	(19),(20)	g	−10−3	10−3	–	
	Tire ellipse	(47)	1	0	1	–	
	Actuator orthogonality	(48)	1	−10−3	10−3	–	
	Motor power limitation	(49)	2×105/rw	0	150	kW	
Bounds on	Rate of traction torque	T˙t	2×103	0	3×103	N m s−1	
	Rate of braking torque	T˙b	4×103	−6×103	0	N m s−1	
	Rate of wheel steering angle	δ˙	π/8	−π/8	π/8	rad s−1	

sensors-24-03281-t002_Table 2 Table 2 NMPC formulation.

	Description	Symbol/
Equation	Scale	Lower	Upper	Units	
Minimize	Cost	JNMPC (83)					
By varing							
States	Velocity	V	100	0	250/3.6	m s−1	
	Sideslip angle	β	1	−π/4	π/4	rad	
	Yaw rate	γ	1	−π/2	π/2	rad s−1	
	Longitudinal acceleration	a¯x	g	−3g	3g	m s−2	
	Lateral acceleration	a¯y	g	−3g	3g	m s−2	
	Path station	s	1	0	Inf	m	
	Lateral displacement	n	5	−Nr+wt/2	Nl−wt/2	m	
	Relative heading	ξ	1	−π/4	π/4	rad	
	Traction torque	Tt	2×103	0	4×103	N m	
	Braking torque	Tb	4×103	−8×103	0	N m	
	Wheel steering angle	δ	π/8	−π/8	π/8	rad	
Controls	Rate of traction torque	T˙t,cmd	2×103	0	3×103	N m s−1	
	Rate of braking torque	T˙b,cmd	4×103	−6×103	0	N m s−1	
	Rate of wheel steering angle	δ˙cmd	π/8	−π/8	π/8	rad s−1	
Parameter	Path curvature	κ	–	–	–	m−1	
Subjectto							
Constraints	Dynamics as IRK	(78)	–	–	–	–	
	Initial condition	(77)	–	–	–	–	
	Tire ellipse	(47)	1	0	1	–	
	Actuator orthogonality	(48)	0.02	−10−3	10−3	–	

Disclaimer/Publisher’s Note: The statements, opinions and data contained in all publications are solely those of the individual author(s) and contributor(s) and not of MDPI and/or the editor(s). MDPI and/or the editor(s) disclaim responsibility for any injury to people or property resulting from any ideas, methods, instructions or products referred to in the content.
==== Refs
References

1. Mora L. Wu X. Panori A. Mind the gap: Developments in autonomous driving research and the sustainability challenge J. Clean. Prod. 2020 275 124087 10.1016/j.jclepro.2020.124087 32934442
2. SAE Standard J3016_202104 Taxonomy and Definitions for Terms Related to Driving Automation Systems for On-Road Motor Vehicles SAE Warrendale, PA, USA 2021 10.4271/J3016_202104
3. Lodhi S.S. Kumar N. Pandey P.K. Autonomous vehicular overtaking maneuver: A survey and taxonomy Veh. Commun. 2023 42 100623 10.1016/j.vehcom.2023.100623
4. Betz J. Zheng H. Liniger A. Rosolia U. Karle P. Behl M. Krovi V. Mangharam R. Autonomous Vehicles on the Edge: A Survey on Autonomous Vehicle Racing IEEE Open J. Intell. Transp. Syst. 2022 3 458 488 10.1109/OJITS.2022.3181510
5. Goh J.Y. Thompson M. Dallas J. Balachandran A. Beyond the stable handling limits: Nonlinear model predictive control for highly transient autonomous drifting Veh. Syst. Dyn. 2024 1 24 10.1080/00423114.2023.2297799
6. de Buck P. Martins J.R.R.A. Minimum lap time trajectory optimisation of performance vehicles with four-wheel drive and active aerodynamic control Veh. Syst. Dyn. 2023 61 2103 2119 10.1080/00423114.2022.2101930
7. Christ F. Wischnewski A. Heilmeier A. Lohmann B. Time-optimal trajectory planning for a race car considering variable tyre-road friction coefficients Veh. Syst. Dyn. 2021 59 588 612 10.1080/00423114.2019.1704804
8. Tadeas Sedlacek D.O. Wollherr D. Minimum-time optimal control for vehicles with active rear-axle steering, transfer case and variable parameters Veh. Syst. Dyn. 2021 59 1227 1255 10.1080/00423114.2020.1742925
9. Perantoni G. Limebeer D.J. Optimal control for a Formula One car with variable parameters Veh. Syst. Dyn. 2014 52 653 678 10.1080/00423114.2014.889315
10. Bianco N.D. Lot R. Gadola M. Minimum time optimal control simulation of a GP2 race car Proc. Inst. Mech. Eng. Part D J. Automob. Eng. 2018 232 1180 1195 10.1177/0954407017728158
11. Gabiccini M. Bartali L. Guiggiani M. Analysis of driving styles of a GP2 car via minimum lap-time direct trajectory optimization Multibody Syst. Dyn. 2021 53 85 113 10.1007/s11044-021-09789-7
12. Massaro M. Limebeer D.J.N. Minimum-lap-time optimisation and simulation Veh. Syst. Dyn. 2021 59 1069 1113 10.1080/00423114.2021.1910718
13. Wohner B. Sevilla F. Grueter B. Diepolder J. Afonso R. Holzapfel F. Hierarchical Nonlinear Model Predictive Control for an Autonomous Racecar Proceedings of the 2021 20th International Conference on Advanced Robotics (ICAR) Ljubljana, Slovenia 6–10 December 2021 113 120 10.1109/ICAR53236.2021.9659316
14. Novi T. Liniger A. Capitani R. Annicchiarico C. Real-time control for at-limit handling driving on a predefined path Veh. Syst. Dyn. 2020 58 1007 1036 10.1080/00423114.2019.1605081
15. Srinivasan S. Nicolas Giles S. Liniger A. A Holistic Motion Planning and Control Solution to Challenge a Professional Racecar Driver IEEE Robot. Autom. Lett. 2021 6 7854 7860 10.1109/LRA.2021.3101244
16. Stano P. Montanaro U. Tavernini D. Tufo M. Fiengo G. Novella L. Sorniotti A. Model predictive path tracking control for automated road vehicles: A review Annu. Rev. Control 2023 55 194 236 10.1016/j.arcontrol.2022.11.001
17. Goh J.Y. Goel T. Christian Gerdes J. Toward Automated Vehicle Control Beyond the Stability Limits: Drifting Along a General Path J. Dyn. Syst. Meas. Control. 2019 142 10.1115/1.4045320
18. Dong H. Yu H. Xi J. Real-Time Model Predictive Control for Simultaneous Drift and Trajectory Tracking of Autonomous Vehicles Proceedings of the 2022 6th CAA International Conference on Vehicular Control and Intelligence (CVCI) Nanjing, China 28–30 October 2022 1 6 10.1109/CVCI56766.2022.9964790
19. Jazar R. Advanced Vehicle Dynamics Springer International Publishing Cham, Switzerland 2019 10.1007/978-3-030-13062-6
20. Goh J.Y. Gerdes J.C. Simultaneous stabilization and tracking of basic automobile drifting trajectories Proceedings of the 2016 IEEE Intelligent Vehicles Symposium (IV) Gothenburg, Sweden 19–22 June 2016 597 602 10.1109/IVS.2016.7535448
21. Metzler M. Tavernini D. Gruber P. Sorniotti A. On Prediction Model Fidelity in Explicit Nonlinear Model Predictive Vehicle Stability Control IEEE Trans. Control Syst. Technol. 2021 29 1964 1980 10.1109/TCST.2020.3012683
22. Pacejka H.B. Tire and Vehicle Dynamics Butterworth-Heinemann Oxford, UK 2012 10.1016/C2010-0-68548-8
23. Wang Z. Sun K. Ma S. Sun L. Gao W. Dong Z. Improved Linear Quadratic Regulator Lateral Path Tracking Approach Based on a Real-Time Updated Algorithm with Fuzzy Control and Cosine Similarity for Autonomous Vehicles Electronics 2022 11 3703 10.3390/electronics11223703
24. Gros S. Diehl M. Numerical Optimal Control (Draft) 2022 Available online: https://www.syscop.de/files/2020ss/NOC/book-NOCSE.pdf (accessed on 28 June 2023)
25. Biegler L.T. Nonlinear Programming Society for Industrial and Applied Mathematics Philadelphia, PA, USA 2010 10.1137/1.9780898719383
26. Limebeer D.J.N. Perantoni G. Optimal Control of a Formula One Car on a Three-Dimensional Track—Part 2: Optimal Control J. Dyn. Syst. Meas. Control 2015 137 051019 10.1115/1.4029466
27. Betts J.T. Practical Methods for Optimal Control Using Nonlinear Programming 3rd ed. Society for Industrial and Applied Mathematics Philadelphia, PA, USA 2020 10.1137/1.9781611976199
28. Martins J.R.R.A. Ning A. Engineering Design Optimization Cambridge University Press Cambridge, UK 2022 10.1017/9781108980647
29. Andersson J.A.E. Gillis J. Horn G. Rawlings J.B. Diehl M. CasADi: A software framework for nonlinear optimization and optimal control Math. Program. Comput. 2019 11 1 36 10.1007/s12532-018-0139-4
30. Biegler L. Zavala V. Large-scale nonlinear programming using IPOPT: An integrating framework for enterprise-wide dynamic optimization Comput. Chem. Eng. 2009 33 575 582 10.1016/j.compchemeng.2008.08.006
31. Kloeser D. Schoels T. Sartor T. Zanelli A. Prison G. Diehl M. NMPC for Racing Using a Singularity-Free Path-Parametric Model with Obstacle Avoidance IFAC-PapersOnLine 2020 53 14324 14329 10.1016/j.ifacol.2020.12.1376
32. Verschueren R. Frison G. Kouzoupis D. Frey J. Duijkeren N.V. Zanelli A. Novoselnik B. Albin T. Quirynen R. Diehl M. acados—A modular open-source framework for fast embedded optimal control Math. Program. Comput. 2022 14 147 183 10.1007/s12532-021-00208-8
33. Betz J. Zheng H. Zang Z. Sauerbeck F. Walas K. Dimitrov V. Behl M. Zheng R. Biswas J. Krovi V. Teaching autonomous systems hands-on: Leveraging modular small-scale hardware in the robotics classroom arXiv 2022 2209.11181
